// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/types/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Kind int32

const (
	Any       Kind = 0
	Bool      Kind = 1
	String    Kind = 2
	Int8      Kind = 3
	Int16     Kind = 4
	Int32     Kind = 5
	Int64     Kind = 6
	Uint8     Kind = 7
	Uint16    Kind = 8
	Uint32    Kind = 9
	Uint64    Kind = 10
	Float32   Kind = 11
	Float64   Kind = 12
	Array     Kind = 13
	Object    Kind = 14
	Tuple     Kind = 15
	Time      Kind = 16
	Date      Kind = 17
	Bytes     Kind = 18
	UUID      Kind = 19
	Timestamp Kind = 20
	Inet      Kind = 21
	Duration  Kind = 22
	Record    Kind = 23
)

var Kind_name = map[int32]string{
	0:  "Any",
	1:  "Bool",
	2:  "String",
	3:  "Int8",
	4:  "Int16",
	5:  "Int32",
	6:  "Int64",
	7:  "Uint8",
	8:  "Uint16",
	9:  "Uint32",
	10: "Uint64",
	11: "Float32",
	12: "Float64",
	13: "Array",
	14: "Object",
	15: "Tuple",
	16: "Time",
	17: "Date",
	18: "Bytes",
	19: "UUID",
	20: "Timestamp",
	21: "Inet",
	22: "Duration",
	23: "Record",
}

var Kind_value = map[string]int32{
	"Any":       0,
	"Bool":      1,
	"String":    2,
	"Int8":      3,
	"Int16":     4,
	"Int32":     5,
	"Int64":     6,
	"Uint8":     7,
	"Uint16":    8,
	"Uint32":    9,
	"Uint64":    10,
	"Float32":   11,
	"Float64":   12,
	"Array":     13,
	"Object":    14,
	"Tuple":     15,
	"Time":      16,
	"Date":      17,
	"Bytes":     18,
	"UUID":      19,
	"Timestamp": 20,
	"Inet":      21,
	"Duration":  22,
	"Record":    23,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}

func (Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff06f8095857fb18, []int{0}
}

type Type struct {
	Kind                 Kind     `protobuf:"varint,1,opt,name=kind,proto3,enum=cloudproud.lunodb.types.v1.Kind" json:"kind,omitempty"`
	Underlying           *Type    `protobuf:"bytes,2,opt,name=underlying,proto3" json:"underlying,omitempty"`
	Items                []*Type  `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff06f8095857fb18, []int{0}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Type.Unmarshal(m, b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Type.Marshal(b, m, deterministic)
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return xxx_messageInfo_Type.Size(m)
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Any
}

func (m *Type) GetUnderlying() *Type {
	if m != nil {
		return m.Underlying
	}
	return nil
}

func (m *Type) GetItems() []*Type {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterEnum("cloudproud.lunodb.types.v1.Kind", Kind_name, Kind_value)
	proto.RegisterType((*Type)(nil), "cloudproud.lunodb.types.v1.Type")
}

func init() { proto.RegisterFile("proto/types/types.proto", fileDescriptor_ff06f8095857fb18) }

var fileDescriptor_ff06f8095857fb18 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x6b, 0xc7, 0xf9, 0x37, 0x69, 0xcb, 0x63, 0x28, 0x34, 0x8a, 0x44, 0x15, 0xb1, 0x40,
	0x15, 0x0b, 0x47, 0x4e, 0x22, 0x0b, 0x99, 0x0d, 0x75, 0x23, 0x50, 0x44, 0x11, 0x51, 0x48, 0xb2,
	0x40, 0xd9, 0x38, 0xf6, 0xc8, 0x0c, 0xd8, 0x33, 0x96, 0x3d, 0x46, 0xf2, 0x0d, 0xb8, 0x04, 0x1b,
	0xd8, 0x71, 0x00, 0x0e, 0xc1, 0x31, 0x58, 0xc2, 0x25, 0xd0, 0xb3, 0x53, 0x92, 0x4d, 0x2b, 0x36,
	0xa3, 0xcf, 0xef, 0xfb, 0x7e, 0xef, 0x3d, 0x8f, 0x86, 0x9c, 0x26, 0xa9, 0x54, 0x72, 0xa0, 0x8a,
	0x84, 0x65, 0xd5, 0x69, 0x96, 0x15, 0xda, 0xf3, 0x23, 0x99, 0x07, 0x49, 0x2a, 0xf3, 0xc0, 0x8c,
	0x72, 0x21, 0x83, 0x8d, 0x59, 0xd9, 0x9f, 0xac, 0xde, 0x49, 0x28, 0x43, 0x59, 0x81, 0xa8, 0x2a,
	0xe2, 0xd1, 0x0f, 0x8d, 0x18, 0x8b, 0x22, 0x61, 0x74, 0x4c, 0x8c, 0x8f, 0x5c, 0x04, 0x5d, 0xad,
	0xaf, 0x9d, 0x1f, 0x0f, 0xfb, 0xe6, 0xcd, 0x9d, 0xcc, 0x57, 0x5c, 0x04, 0xf3, 0x32, 0x4d, 0x9f,
	0x13, 0x92, 0x8b, 0x80, 0xa5, 0x51, 0xc1, 0x45, 0xd8, 0xd5, 0xfb, 0xda, 0x79, 0xe7, 0x76, 0x16,
	0x67, 0xcd, 0xf7, 0x18, 0x6a, 0x93, 0x3a, 0x57, 0x2c, 0xce, 0xba, 0xb5, 0x7e, 0xed, 0xbf, 0xe0,
	0x2a, 0xfe, 0xe4, 0x8b, 0x4e, 0x0c, 0x5c, 0x84, 0x36, 0x49, 0xed, 0x42, 0x14, 0x70, 0x40, 0x5b,
	0xc4, 0x70, 0xa5, 0x8c, 0x40, 0xa3, 0x84, 0x34, 0xde, 0xaa, 0x94, 0x8b, 0x10, 0x74, 0xac, 0x4e,
	0x85, 0x7a, 0x0a, 0x35, 0xda, 0x26, 0xf5, 0xa9, 0x50, 0x96, 0x0d, 0xc6, 0x56, 0x8e, 0x86, 0x50,
	0xdf, 0x4a, 0x7b, 0x0c, 0x0d, 0x94, 0x4b, 0x8e, 0xd9, 0x26, 0x76, 0x40, 0x69, 0xd9, 0xd0, 0xba,
	0xd6, 0xa3, 0x21, 0xb4, 0xaf, 0xb5, 0x3d, 0x06, 0x42, 0x3b, 0xa4, 0xf9, 0x22, 0x92, 0x1e, 0x1a,
	0x9d, 0x7f, 0x1f, 0xf6, 0x18, 0x0e, 0xb1, 0xd1, 0x45, 0x9a, 0x7a, 0x05, 0x1c, 0x21, 0xf0, 0x66,
	0xf3, 0x81, 0xf9, 0x0a, 0x8e, 0xb1, 0xbc, 0xc8, 0x93, 0x88, 0xc1, 0x1d, 0xdc, 0x6a, 0xc1, 0x63,
	0x06, 0x80, 0x6a, 0xe2, 0x29, 0x06, 0x77, 0xd1, 0x76, 0x0b, 0xc5, 0x32, 0xa0, 0x58, 0x5c, 0x2e,
	0xa7, 0x13, 0xb8, 0x47, 0x8f, 0x48, 0x1b, 0x83, 0x99, 0xf2, 0xe2, 0x04, 0x4e, 0xaa, 0xbf, 0x61,
	0x0a, 0xee, 0xd3, 0x43, 0xd2, 0x9a, 0xe4, 0xa9, 0xa7, 0xb8, 0x14, 0xf0, 0x00, 0xc7, 0xcc, 0x99,
	0x2f, 0xd3, 0x00, 0x4e, 0x7b, 0xc6, 0xe7, 0x6f, 0x67, 0x07, 0xee, 0x1f, 0x8d, 0x9c, 0xf9, 0x32,
	0xbe, 0xe5, 0x3a, 0x5d, 0x82, 0xf7, 0x99, 0xcd, 0xf0, 0x1d, 0xcc, 0xb4, 0x77, 0xc3, 0x90, 0xab,
	0xf7, 0xf9, 0xc6, 0xf4, 0x65, 0x3c, 0xd8, 0x41, 0x83, 0x2d, 0xe4, 0x25, 0x7c, 0xb0, 0xf7, 0xea,
	0x9e, 0x95, 0xe7, 0x57, 0xbd, 0x76, 0x79, 0xb5, 0xf8, 0xae, 0xf7, 0x2e, 0x77, 0x43, 0xae, 0xaa,
	0x7c, 0xd9, 0xda, 0x5c, 0x59, 0x3f, 0xf7, 0xcd, 0x75, 0x65, 0xae, 0x4b, 0x73, 0xbd, 0xb2, 0x7e,
	0xe9, 0x8f, 0x6f, 0x36, 0xd7, 0x2f, 0x67, 0xee, 0x6b, 0xa6, 0xbc, 0xc0, 0x53, 0xde, 0x6f, 0xfd,
	0xe1, 0x2e, 0xe8, 0x38, 0x55, 0xd2, 0x71, 0xca, 0xa8, 0xe3, 0xac, 0xac, 0x4d, 0xa3, 0xdc, 0x6d,
	0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x7d, 0xd9, 0xca, 0x1a, 0x03, 0x00, 0x00,
}
