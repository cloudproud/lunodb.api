openapi: 3.0.3
info:
  title: Kit
  version: 0.1.0
  description: |-

tags:
  - name: SQL
    description: Endpoints to interact with the underlying data
  - name: Sources
    description: Endpoints to manage and interact with data sources
  - name: Connectors
    description: Endpoints to maange and interact with custom connectors
  - name: Catalogs
    description: Endpoints to manage and interact with data catalogs
  - name: IAM
    description: Endpoints to manage RBAC and API keys
paths:
  /v1/namespace/{namespace}/query:
    get:
      tags:
        - SQL
      summary: Interact with the data catalogs through SQL
      description: Interact with the configured underlying data catalogs using SQL.
      operationId: query
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - name: statements
          in: query
          description: SQL query statements to be executed
          required: true
          schema:
            type: string
        - name: catalog
          in: query
          description: Currently selected catalog
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The total amount of rows to be returned
          schema:
            default: 100
            type: number
            enum:
              - 100
              - 500
              - 1000
              - 0
        - name: stream
          in: query
          description: If true, the server will stream results using Server-Sent Events.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The query has executed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rows"
            text/event-stream:
              schema:
                type: string
                format: binary
                example: |
                  event: scope
                  data: {
                    "source": {
                      "name": "datalake",
                      "connector": "postgres",
                      "schema": "public",
                      "table": "invoices"
                    },
                    "table": {
                      "name": "invoices",
                      "schema": "public"
                    }
                  }

                  event: columns
                  data: [
                    { "name": "name", "type": "string", "nullable": true },
                    { "name": "age", "type": "integer", "nullable": false }
                  ]

                  event: row
                  data: ["Arya", "18"]

                  event: end-of-execution
                  data: {
                    "planning": 90,
                    "execution": 180
                  }

                  event: error
                  data: {
                    "title": "Invalid prompt",
                    "detail": "The prompt goes against our data policy."
                  }
        "400":
          description: Invalid SQL query. This status code is returned whenever the returned SQL query is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: The user is unauthorised to access one or more of the requested data catalogs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/connectors:
    get:
      tags:
        - Sources
      summary: Fetch all available connectors
      description: Fetch all available connectors
      operationId: getConnectors
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connectors"
        "401":
          description: The user is unauthorised to access the sources within the given namespace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/sources:
    get:
      tags:
        - Sources
      summary: Fetch all sources
      description: Fetch all sources within a given catalog
      operationId: getSources
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sources"
        "401":
          description: The user is unauthorised to access the sources within the given namespace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/source:
    post:
      tags:
        - Sources
      summary: Create a new source
      description: Create a new catalog source using the given parameters
      operationId: newSource
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSource"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        "401":
          description: The user is unauthorised to create a new source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/source/test_connection:
    post:
      tags:
        - Sources
      summary: Test the source connection
      description: Attempt to create a connection to the given source
      operationId: testSourceConnection
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSource"
      responses:
        "200":
          description: The source options are valid and a connection has been established
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "400":
          description: Unable to connect to the given source using the provided options
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: The user is unauthorised to create a new source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/source/{source}:
    get:
      tags:
        - Sources
      summary: Fetch the source details within the given catalog
      description: Retreive the source details within the a given catalog matching the given source id.
      operationId: getSource
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: source
          schema:
            type: string
          required: true
          description: Unique source identifier
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        "404":
          description: The requested source has not been found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: The user is unauthorised to access the given source.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - Sources
      summary: Delete a single catalog source
      description: Delete a single catalog source
      operationId: deleteSource
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: source
          schema:
            type: string
          required: true
          description: Unique source identifier
      responses:
        "200":
          description: The source has been deleted
        "401":
          description: The user is unauthorised to delete the given source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/source/{source}/options:
    get:
      tags:
        - Sources
      summary: Fetch the source options within the given catalog
      description: Retreive the source options within the a given catalog matching the given source id.
      operationId: getSourceOptions
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: source
          schema:
            type: string
          required: true
          description: Unique source identifier
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceOptions"
        "401":
          description: The user is unauthorised to access the given source options.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/source/{source}/fetch:
    get:
      tags:
        - Sources
      summary: Fetch the latest source tables and schemas
      description: Fetch the latest source tables and schemas and update the internal definitions
      operationId: fetchSource
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: source
          schema:
            type: string
          required: true
          description: Unique source identifier
        - in: query
          name: expose_global
          description: Update the globally exposed tables from the given source
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        "401":
          description: The user is unauthorised to fetch the latest source schemas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/catalog:
    post:
      tags:
        - Catalogs
      summary: Set a new catalog
      description: Create a new catalog using the given parameters
      operationId: setCatalog
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetCatalog"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
        "401":
          description: The user is unauthorised to create a new catalog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/catalog/{catalog}:
    get:
      tags:
        - Catalogs
      summary: Fetch all data sets within the given catalog
      description: Fetch all data sets within a given catalog
      operationId: getCatalog
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: catalog
          schema:
            type: string
          required: true
          description: Unique catalog identifier
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
        "401":
          description: The user is unauthorised to get all tables.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      tags:
        - Catalogs
      summary: Add a table to a catalog
      description: Attempts to add the given dataset to the given catalog
      operationId: updateCatalog
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: catalog
          schema:
            type: string
          required: true
          description: Unique catalog identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetCatalog"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
        "401":
          description: The user is unauthorised to create a new catalog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - Catalogs
      summary: Delete a single catalog
      description: Delete a single catalog
      operationId: deleteCatalog
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: catalog
          schema:
            type: string
          required: true
          description: Unique catalog identifier
      responses:
        "200":
          description: The catalog has been deleted
        "401":
          description: The user is unauthorised to delete the given catalog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/catalogs:
    get:
      tags:
        - Catalogs
      summary: Fetch all data catalogs
      description: Fetches all configured catalogs
      operationId: getCatalogs
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalogs"
        "401":
          description: The user is unauthorised to fetch catalogs within the given namespace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/connectors:
    post:
      tags:
        - Connectors
      summary: Register a new connector
      description: Registers a new custom connector within the system
      operationId: newConnector
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomConnector"
      responses:
        "201":
          description: The connector has been added to the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        "401":
          description: The user is unauthorised to delete the given catalog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/keys:
    get:
      tags:
        - IAM
      summary: Fetch all API keys
      description: Fetch all API keys registered within the given namespace
      operationId: getKeys
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "401":
          description: The user is unauthorised to access the namespace keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - IAM
      summary: Register a new API key
      description: Registers a new API key with the given policies
      operationId: newKey
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Key"
      responses:
        "201":
          description: The key has been created within the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "401":
          description: The user is unauthorised to create the given key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /v1/namespace/{namespace}/key/{id}/revoke:
    delete:
      tags:
        - IAM
      summary: Revoke the given key
      description: Permanently revokes the given key from the system
      operationId: deleteKey
      parameters:
        - in: path
          name: namespace
          schema:
            type: string
          required: true
          description: Unique namespace identifier
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique key identifier
      responses:
        "200":
          description: ""
        "401":
          description: The user is unauthorised to revoke the given key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: token
  schemas:
    Empty:
      type: string
    Problem:
      type: object
      required:
        - title
        - detail
      properties:
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually not
            suited for non technical stakeholders and not localized.
          example: some description for the error situation
    Rows:
      type: object
      required:
        - columns
        - rows
        - explain
        - scope
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
          example:
            - name: Jon
              type: string
            - name: Snow
              type: string
        rows:
          type: array
          items:
            type: array
            items:
              type: string
              nullable: true
            example:
              - Jon
              - null
        explain:
          $ref: "#/components/schemas/Explain"
        scope:
          type: array
          items:
            $ref: "#/components/schemas/Scope"
    Scope:
      type: object
      required:
        - source
        - table
      properties:
        source:
          $ref: "#/components/schemas/ScopeRef"
        table:
          $ref: "#/components/schemas/ScopeTable"
    ScopeRef:
      type: object
      required:
        - name
        - connector
        - schema
        - table
      properties:
        name:
          type: string
          example: datalake
        connector:
          type: string
          example: postgres
        schema:
          type: string
          example: public
        table:
          type: string
          example: invoices
    ScopeTable:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
          example: invoices
        schema:
          type: string
          example: public
    Explain:
      type: object
      description: explain the executed query
      required:
        - planning
        - execution
      properties:
        planning:
          description: response time in ms
          type: integer
        execution:
          description: response time in ms
          type: integer
    Column:
      type: object
      required:
        - name
        - type
        - nullable
      properties:
        name:
          type: string
          example: weirwood_tree
        type:
          type: string
          example: string
        nullable:
          type: boolean
          example: true
    Catalogs:
      type: array
      items:
        $ref: "#/components/schemas/Catalog"
    Catalog:
      type: object
      required:
        - uid
        - name
        - description
        - labels
        - tables
      properties:
        uid:
          type: integer
          format: uint64
          example: 1234567890
        name:
          type: string
          example: warehousing
        description:
          type: string
          example: all data related to warehousing
        labels:
          type: array
          nullable: true
          items:
            type: string
            example: logistics, shipping, products
        tables:
          $ref: "#/components/schemas/Tables"
    SetCatalog:
      type: object
      required:
        - uid
        - name
        - description
        - labels
        - tables
      properties:
        uid:
          type: integer
          format: uint64
          example: 1234567890
        name:
          type: string
          description: the catalog name referenced within SQL queries
        description:
          type: string
        labels:
          type: array
          items:
            type: string
        tables:
          type: array
          items:
            $ref: "#/components/schemas/CatalogTable"
    CatalogTable:
      type: object
      required:
        - ref
        - name
        - schema
      properties:
        ref:
          $ref: "#/components/schemas/SourceRef"
        name:
          type: string
          description: the table name referenced within SQL queries
        schema:
          type: string
          default: public
          description: the table schema referenced within SQL queries
    SourceRef:
      type: object
      required:
        - name
        - table
      properties:
        name:
          type: string
        table:
          $ref: "#/components/schemas/TableRef"
    TableRef:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
          description: the table name referenced within SQL queries
        schema:
          type: string
          default: public
          description: the table schema referenced within SQL queries
    CustomConnector:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: PostgreSQL
        description:
          type: string
          example: PostgreSQL connector
    Connectors:
      type: array
      items:
        $ref: "#/components/schemas/Connector"
    Connector:
      type: object
      required:
        - id
        - name
        - options
        - description
      properties:
        id:
          type: string
          example: postgres
        name:
          type: string
          example: PostgreSQL
        description:
          type: string
          example: PostgreSQL connector
        options:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/ConnectorOption"
    ConnectorOption:
      type: object
      required:
        - key
        - name
        - required
        - type
        - default
        - placeholder
        - description
      properties:
        key:
          type: string
          example: host
        name:
          type: string
          example: Host
        required:
          type: boolean
          example: true
        type:
          type: string
          enum:
            - string
            - password
            - boolean
            - integer
        default:
          type: string
          example:
        placeholder:
          type: string
          example: 127.0.0.1
        description:
          type: string
          example: hostname of the data source
    Sources:
      type: array
      items:
        $ref: "#/components/schemas/Source"
    Source:
      type: object
      required:
        - uid
        - name
        - connector
        - healthy
        - tables
      properties:
        uid:
          type: integer
          format: uint64
          example: 1234567890
        name:
          type: string
          example: "Arya_Stark"
        connector:
          type: string
          example: "postgres"
          description: represents the connector name used to connect with the given source
        healthy:
          type: boolean
        tables:
          $ref: "#/components/schemas/Tables"
    NewSource:
      type: object
      required:
        - name
        - description
        - labels
        - expose_global
        - connector
        - options
      properties:
        name:
          type: string
          example: "Customer Service"
        description:
          type: string
          example: "Customer Service"
        labels:
          type: array
          items:
            type: string
            example: logistics, shipping, products
        expose_global:
          type: boolean
          example: true
        connector:
          type: string
          example: "postgresql"
          description: represents the connector name used to connect with the given source
        options:
          $ref: "#/components/schemas/SourceOptions"
    SourceOptions:
      type: object
      additionalProperties:
        type: string
      example:
        host: 127.0.0.1
        port: "5321"
    Tables:
      type: array
      items:
        $ref: "#/components/schemas/Table"
    Table:
      type: object
      required:
        - name
        - connector
        - schema
        - schemaless
        - columns
        - type
      properties:
        name:
          type: string
          example: invoices
        connector:
          type: string
          example: postgres
        schema:
          type: string
          example: public
        schemaless:
          type: boolean
          example: true
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
    Keys:
      type: array
      items:
        $ref: "#/components/schemas/Key"
    Key:
      type: object
      required: 
        - id
        - policies
        - description
        - created_at
        - created_by
      properties:
        id:
          type: integer
          format: uint64
          description: Unique identifier of the key
        secret:
          type: string
          description: The API secret (only returned at creation time)
        policies:
          type: array
          items:
            $ref: "#/components/schemas/Policy"
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: Optional expiration timestamp
        description:
          type: string
          description: Human-readable description
    Policy:
      type: object
      required:
        - resources
        - permissions
      properties:
        resources:
          type: array
          items:
            type: string
          example: ["connector:00000000-0000-0000-0000-000000000000"]
        permissions:
          type: array
          items:
            type: string
          example: ["connector:write"]
security:
  - bearerAuth: []