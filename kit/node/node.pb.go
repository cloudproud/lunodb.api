// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kit/node/node.proto

package node

import (
	fmt "fmt"
	types "github.com/cloudproud/lunodb/services/kit/pkg/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OperatorStatement int32

const (
	OperatorUnknown    OperatorStatement = 0
	Where              OperatorStatement = 1
	Limit              OperatorStatement = 2
	Offset             OperatorStatement = 3
	Order              OperatorStatement = 4
	LeftJoin           OperatorStatement = 5
	RightJoin          OperatorStatement = 6
	InnerJoin          OperatorStatement = 7
	OuterJoin          OperatorStatement = 8
	Equal              OperatorStatement = 9
	NotEqual           OperatorStatement = 10
	In                 OperatorStatement = 11
	NotIn              OperatorStatement = 12
	GreaterThan        OperatorStatement = 13
	GreaterOrEqualThan OperatorStatement = 14
	LessThan           OperatorStatement = 15
	LessOrEqualThan    OperatorStatement = 16
	Like               OperatorStatement = 17
	NotLike            OperatorStatement = 18
	ILike              OperatorStatement = 19
	NotILike           OperatorStatement = 20
	RegMatch           OperatorStatement = 21
	NotRegMatch        OperatorStatement = 22
	RegIMatch          OperatorStatement = 23
	NotRegIMatch       OperatorStatement = 24
	IsDistinctFrom     OperatorStatement = 25
	IsNotDistinctFrom  OperatorStatement = 26
	Any                OperatorStatement = 27
	All                OperatorStatement = 28
	Binary             OperatorStatement = 29
)

var OperatorStatement_name = map[int32]string{
	0:  "OperatorUnknown",
	1:  "Where",
	2:  "Limit",
	3:  "Offset",
	4:  "Order",
	5:  "LeftJoin",
	6:  "RightJoin",
	7:  "InnerJoin",
	8:  "OuterJoin",
	9:  "Equal",
	10: "NotEqual",
	11: "In",
	12: "NotIn",
	13: "GreaterThan",
	14: "GreaterOrEqualThan",
	15: "LessThan",
	16: "LessOrEqualThan",
	17: "Like",
	18: "NotLike",
	19: "ILike",
	20: "NotILike",
	21: "RegMatch",
	22: "NotRegMatch",
	23: "RegIMatch",
	24: "NotRegIMatch",
	25: "IsDistinctFrom",
	26: "IsNotDistinctFrom",
	27: "Any",
	28: "All",
	29: "Binary",
}

var OperatorStatement_value = map[string]int32{
	"OperatorUnknown":    0,
	"Where":              1,
	"Limit":              2,
	"Offset":             3,
	"Order":              4,
	"LeftJoin":           5,
	"RightJoin":          6,
	"InnerJoin":          7,
	"OuterJoin":          8,
	"Equal":              9,
	"NotEqual":           10,
	"In":                 11,
	"NotIn":              12,
	"GreaterThan":        13,
	"GreaterOrEqualThan": 14,
	"LessThan":           15,
	"LessOrEqualThan":    16,
	"Like":               17,
	"NotLike":            18,
	"ILike":              19,
	"NotILike":           20,
	"RegMatch":           21,
	"NotRegMatch":        22,
	"RegIMatch":          23,
	"NotRegIMatch":       24,
	"IsDistinctFrom":     25,
	"IsNotDistinctFrom":  26,
	"Any":                27,
	"All":                28,
	"Binary":             29,
}

func (x OperatorStatement) String() string {
	return proto.EnumName(OperatorStatement_name, int32(x))
}

func (OperatorStatement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{0}
}

type ComparisonType int32

const (
	UnknownComparisonType ComparisonType = 0
	VariableConstant      ComparisonType = 1
	VariableVariable      ComparisonType = 2
)

var ComparisonType_name = map[int32]string{
	0: "UnknownComparisonType",
	1: "VariableConstant",
	2: "VariableVariable",
}

var ComparisonType_value = map[string]int32{
	"UnknownComparisonType": 0,
	"VariableConstant":      1,
	"VariableVariable":      2,
}

func (x ComparisonType) String() string {
	return proto.EnumName(ComparisonType_name, int32(x))
}

func (ComparisonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{1}
}

type BinaryStatement int32

const (
	BinaryStatementUnknown BinaryStatement = 0
	Bitand                 BinaryStatement = 1
	Bitor                  BinaryStatement = 2
	Bitxor                 BinaryStatement = 3
	Plus                   BinaryStatement = 4
	Minus                  BinaryStatement = 5
	Mult                   BinaryStatement = 6
	Div                    BinaryStatement = 7
	FloorDiv               BinaryStatement = 8
	Mod                    BinaryStatement = 9
	Concat                 BinaryStatement = 10
	LShift                 BinaryStatement = 11
	RShift                 BinaryStatement = 12
	Pow                    BinaryStatement = 13
	JSONFetchText          BinaryStatement = 14
	JSONFetchVal           BinaryStatement = 15
)

var BinaryStatement_name = map[int32]string{
	0:  "BinaryStatementUnknown",
	1:  "Bitand",
	2:  "Bitor",
	3:  "Bitxor",
	4:  "Plus",
	5:  "Minus",
	6:  "Mult",
	7:  "Div",
	8:  "FloorDiv",
	9:  "Mod",
	10: "Concat",
	11: "LShift",
	12: "RShift",
	13: "Pow",
	14: "JSONFetchText",
	15: "JSONFetchVal",
}

var BinaryStatement_value = map[string]int32{
	"BinaryStatementUnknown": 0,
	"Bitand":                 1,
	"Bitor":                  2,
	"Bitxor":                 3,
	"Plus":                   4,
	"Minus":                  5,
	"Mult":                   6,
	"Div":                    7,
	"FloorDiv":               8,
	"Mod":                    9,
	"Concat":                 10,
	"LShift":                 11,
	"RShift":                 12,
	"Pow":                    13,
	"JSONFetchText":          14,
	"JSONFetchVal":           15,
}

func (x BinaryStatement) String() string {
	return proto.EnumName(BinaryStatement_name, int32(x))
}

func (BinaryStatement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{2}
}

// Source represents a source configuration which could be used to
// construct a new source. Sources are used to interact with data sets within a
// single collection.
type Source struct {
	UID                  uint64            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Namespace            string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Connector            string            `protobuf:"bytes,4,opt,name=connector,proto3" json:"connector,omitempty"`
	Options              map[string]string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Replication          uint32            `protobuf:"varint,6,opt,name=replication,proto3" json:"replication,omitempty"`
	Tables               []*Table          `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{0}
}
func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *Source) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Source) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Source) GetConnector() string {
	if m != nil {
		return m.Connector
	}
	return ""
}

func (m *Source) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Source) GetReplication() uint32 {
	if m != nil {
		return m.Replication
	}
	return 0
}

func (m *Source) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

type Operator struct {
	Statement            OperatorStatement `protobuf:"varint,1,opt,name=statement,proto3,enum=cloudproud.lunodb.kit.node.v1.OperatorStatement" json:"statement,omitempty"`
	ComparisonTypes      []ComparisonType  `protobuf:"varint,2,rep,packed,name=comparison_types,json=comparisonTypes,proto3,enum=cloudproud.lunodb.kit.node.v1.ComparisonType" json:"comparison_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{1}
}
func (m *Operator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operator.Unmarshal(m, b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return xxx_messageInfo_Operator.Size(m)
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

func (m *Operator) GetStatement() OperatorStatement {
	if m != nil {
		return m.Statement
	}
	return OperatorUnknown
}

func (m *Operator) GetComparisonTypes() []ComparisonType {
	if m != nil {
		return m.ComparisonTypes
	}
	return nil
}

type SourceRef struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TableSchema          string   `protobuf:"bytes,3,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema,omitempty"`
	TableName            string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceRef) Reset()         { *m = SourceRef{} }
func (m *SourceRef) String() string { return proto.CompactTextString(m) }
func (*SourceRef) ProtoMessage()    {}
func (*SourceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{2}
}
func (m *SourceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceRef.Unmarshal(m, b)
}
func (m *SourceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceRef.Marshal(b, m, deterministic)
}
func (m *SourceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceRef.Merge(m, src)
}
func (m *SourceRef) XXX_Size() int {
	return xxx_messageInfo_SourceRef.Size(m)
}
func (m *SourceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceRef.DiscardUnknown(m)
}

var xxx_messageInfo_SourceRef proto.InternalMessageInfo

func (m *SourceRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SourceRef) GetTableSchema() string {
	if m != nil {
		return m.TableSchema
	}
	return ""
}

func (m *SourceRef) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type Table struct {
	// Types that are valid to be assigned to Ref:
	//
	//	*Table_Source
	Ref                  isTable_Ref `protobuf_oneof:"ref"`
	Name                 string      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Schema               string      `protobuf:"bytes,11,opt,name=schema,proto3" json:"schema,omitempty"`
	Catalog              string      `protobuf:"bytes,12,opt,name=catalog,proto3" json:"catalog,omitempty"`
	Schemaless           bool        `protobuf:"varint,13,opt,name=schemaless,proto3" json:"schemaless,omitempty"`
	Columns              []*Column   `protobuf:"bytes,14,rep,name=columns,proto3" json:"columns,omitempty"`
	Connector            string      `protobuf:"bytes,15,opt,name=connector,proto3" json:"connector,omitempty"`
	Operators            []*Operator `protobuf:"bytes,16,rep,name=operators,proto3" json:"operators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{3}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Table.Unmarshal(m, b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Table.Marshal(b, m, deterministic)
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return xxx_messageInfo_Table.Size(m)
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

type isTable_Ref interface {
	isTable_Ref()
}

type Table_Source struct {
	Source *SourceRef `protobuf:"bytes,1,opt,name=source,proto3,oneof" json:"source,omitempty"`
}

func (*Table_Source) isTable_Ref() {}

func (m *Table) GetRef() isTable_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Table) GetSource() *SourceRef {
	if x, ok := m.GetRef().(*Table_Source); ok {
		return x.Source
	}
	return nil
}

func (m *Table) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Table) GetCatalog() string {
	if m != nil {
		return m.Catalog
	}
	return ""
}

func (m *Table) GetSchemaless() bool {
	if m != nil {
		return m.Schemaless
	}
	return false
}

func (m *Table) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Table) GetConnector() string {
	if m != nil {
		return m.Connector
	}
	return ""
}

func (m *Table) GetOperators() []*Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Table) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Table_Source)(nil),
	}
}

type Catalog struct {
	UID                  uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Labels               []string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Tables               []*Table `protobuf:"bytes,6,rep,name=tables,proto3" json:"tables,omitempty"`
	Hidden               bool     `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Catalog) Reset()         { *m = Catalog{} }
func (m *Catalog) String() string { return proto.CompactTextString(m) }
func (*Catalog) ProtoMessage()    {}
func (*Catalog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{4}
}
func (m *Catalog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Catalog.Unmarshal(m, b)
}
func (m *Catalog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Catalog.Marshal(b, m, deterministic)
}
func (m *Catalog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Catalog.Merge(m, src)
}
func (m *Catalog) XXX_Size() int {
	return xxx_messageInfo_Catalog.Size(m)
}
func (m *Catalog) XXX_DiscardUnknown() {
	xxx_messageInfo_Catalog.DiscardUnknown(m)
}

var xxx_messageInfo_Catalog proto.InternalMessageInfo

func (m *Catalog) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *Catalog) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Catalog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Catalog) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Catalog) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Catalog) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *Catalog) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type Column struct {
	Name                 string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 *types.Type `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Indexed              bool        `protobuf:"varint,5,opt,name=indexed,proto3" json:"indexed,omitempty"`
	Nullable             bool        `protobuf:"varint,6,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Operators            []*Operator `protobuf:"bytes,7,rep,name=operators,proto3" json:"operators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_2759ccd27fb5d5d4, []int{5}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Column.Unmarshal(m, b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Column.Marshal(b, m, deterministic)
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return xxx_messageInfo_Column.Size(m)
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetType() *types.Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Column) GetIndexed() bool {
	if m != nil {
		return m.Indexed
	}
	return false
}

func (m *Column) GetNullable() bool {
	if m != nil {
		return m.Nullable
	}
	return false
}

func (m *Column) GetOperators() []*Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

func init() {
	proto.RegisterEnum("cloudproud.lunodb.kit.node.v1.OperatorStatement", OperatorStatement_name, OperatorStatement_value)
	proto.RegisterEnum("cloudproud.lunodb.kit.node.v1.ComparisonType", ComparisonType_name, ComparisonType_value)
	proto.RegisterEnum("cloudproud.lunodb.kit.node.v1.BinaryStatement", BinaryStatement_name, BinaryStatement_value)
	proto.RegisterType((*Source)(nil), "cloudproud.lunodb.kit.node.v1.Source")
	proto.RegisterMapType((map[string]string)(nil), "cloudproud.lunodb.kit.node.v1.Source.OptionsEntry")
	proto.RegisterType((*Operator)(nil), "cloudproud.lunodb.kit.node.v1.Operator")
	proto.RegisterType((*SourceRef)(nil), "cloudproud.lunodb.kit.node.v1.SourceRef")
	proto.RegisterType((*Table)(nil), "cloudproud.lunodb.kit.node.v1.Table")
	proto.RegisterType((*Catalog)(nil), "cloudproud.lunodb.kit.node.v1.Catalog")
	proto.RegisterType((*Column)(nil), "cloudproud.lunodb.kit.node.v1.Column")
}

func init() { proto.RegisterFile("kit/node/node.proto", fileDescriptor_2759ccd27fb5d5d4) }

var fileDescriptor_2759ccd27fb5d5d4 = []byte{
	// 1206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xfa, 0xdb, 0xaf, 0x1d, 0x7b, 0x32, 0x4d, 0xc2, 0xd6, 0x34, 0xad, 0x1b, 0x81, 0x30,
	0x95, 0xb0, 0x49, 0xb8, 0x54, 0x16, 0x12, 0xc2, 0xe9, 0x07, 0x6e, 0x1c, 0x3b, 0xda, 0xa4, 0x01,
	0xa1, 0xa0, 0x6a, 0xbc, 0x3b, 0xb6, 0x47, 0xd9, 0x9d, 0x31, 0xbb, 0xb3, 0x6d, 0xf3, 0x0f, 0xf8,
	0x1d, 0x70, 0xe3, 0xcc, 0x7f, 0x40, 0xe2, 0xca, 0x99, 0x1e, 0x7a, 0x00, 0x89, 0x1b, 0xff, 0x00,
	0xcd, 0xcc, 0xfa, 0xab, 0x40, 0x53, 0x10, 0x17, 0xfb, 0x7d, 0x9e, 0x79, 0xbf, 0xe6, 0xfd, 0x58,
	0x0d, 0x5c, 0xbb, 0x60, 0xb2, 0xc5, 0x85, 0x47, 0xf5, 0x4f, 0x73, 0x1a, 0x0a, 0x29, 0xf0, 0x8e,
	0xeb, 0x8b, 0xd8, 0x9b, 0x86, 0x22, 0xf6, 0x9a, 0x7e, 0xcc, 0x85, 0x37, 0x6c, 0x5e, 0x30, 0xd9,
	0xd4, 0x1a, 0x4f, 0xf7, 0x6a, 0x9b, 0x63, 0x31, 0x16, 0x5a, 0xb3, 0xa5, 0x24, 0x63, 0x54, 0xbb,
	0x35, 0x16, 0x62, 0xec, 0xd3, 0x96, 0x46, 0xc3, 0x78, 0xd4, 0x92, 0x2c, 0xa0, 0x91, 0x24, 0xc1,
	0x34, 0x51, 0xd8, 0x52, 0xa1, 0xe4, 0xe5, 0x94, 0x46, 0xe6, 0xd7, 0xd0, 0xbb, 0xbf, 0xa4, 0x20,
	0x77, 0x22, 0xe2, 0xd0, 0xa5, 0xf8, 0x3a, 0xa4, 0x63, 0xe6, 0xd9, 0x56, 0xdd, 0x6a, 0x64, 0x3a,
	0xf9, 0x97, 0x2f, 0x6e, 0xa5, 0x1f, 0x77, 0xef, 0x39, 0x8a, 0xc3, 0x37, 0xa0, 0xc8, 0x49, 0x40,
	0xa3, 0x29, 0x71, 0xa9, 0x9d, 0xaa, 0x5b, 0x8d, 0xa2, 0xb3, 0x20, 0x30, 0x86, 0x8c, 0x02, 0x76,
	0x5a, 0x1f, 0x68, 0x59, 0x59, 0xb8, 0x82, 0x73, 0xea, 0x4a, 0x11, 0xda, 0x19, 0x63, 0x31, 0x27,
	0x70, 0x0f, 0xf2, 0x62, 0x2a, 0x99, 0xe0, 0x91, 0x9d, 0xad, 0xa7, 0x1b, 0xa5, 0xfd, 0xfd, 0xe6,
	0x6b, 0x2f, 0xdd, 0x34, 0x29, 0x36, 0x07, 0xc6, 0xe8, 0x3e, 0x97, 0xe1, 0xa5, 0x33, 0x73, 0x81,
	0xeb, 0x50, 0x0a, 0xe9, 0xd4, 0x67, 0x2e, 0x51, 0xd8, 0xce, 0xd5, 0xad, 0xc6, 0xba, 0xb3, 0x4c,
	0xe1, 0x8f, 0x21, 0x27, 0xc9, 0xd0, 0xa7, 0x91, 0x9d, 0xd7, 0xe1, 0xde, 0xb9, 0x22, 0xdc, 0xa9,
	0x52, 0x76, 0x12, 0x9b, 0x5a, 0x1b, 0xca, 0xcb, 0x81, 0x31, 0x82, 0xf4, 0x05, 0xbd, 0xd4, 0x85,
	0x2a, 0x3a, 0x4a, 0xc4, 0x9b, 0x90, 0x7d, 0x4a, 0xfc, 0x78, 0x56, 0x1b, 0x03, 0xda, 0xa9, 0xbb,
	0xd6, 0xee, 0x0f, 0x16, 0x14, 0x06, 0x53, 0x1a, 0x12, 0x75, 0xed, 0x3e, 0x14, 0x23, 0x49, 0x24,
	0x0d, 0x28, 0x97, 0xda, 0xbc, 0xb2, 0xff, 0xe1, 0x15, 0x99, 0xcc, 0x6c, 0x4f, 0x66, 0x76, 0xce,
	0xc2, 0x05, 0xfe, 0x02, 0x90, 0x2b, 0x82, 0x29, 0x09, 0x59, 0x24, 0xf8, 0x13, 0xdd, 0x56, 0x3b,
	0x55, 0x4f, 0x37, 0x2a, 0xfb, 0x1f, 0x5c, 0xe1, 0xf6, 0x60, 0x6e, 0x76, 0x7a, 0x39, 0xa5, 0x4e,
	0xd5, 0x5d, 0xc1, 0xd1, 0x2e, 0x81, 0xa2, 0x29, 0xb9, 0x43, 0x47, 0xf3, 0xfe, 0x5a, 0x4b, 0xfd,
	0xbd, 0x0d, 0x65, 0x5d, 0x9d, 0x27, 0x91, 0x3b, 0xa1, 0x01, 0x49, 0x7a, 0x5f, 0xd2, 0xdc, 0x89,
	0xa6, 0xf0, 0x0e, 0x80, 0x51, 0xd1, 0xc6, 0xc9, 0xd4, 0x68, 0xa6, 0x4f, 0x02, 0xba, 0xfb, 0x22,
	0x05, 0x59, 0x5d, 0x67, 0xdc, 0x81, 0x5c, 0xa4, 0x83, 0xe9, 0x08, 0xa5, 0xfd, 0xc6, 0x1b, 0x0d,
	0x83, 0x43, 0x47, 0x9f, 0xad, 0x39, 0x89, 0xe5, 0x3c, 0x47, 0x58, 0xca, 0x71, 0x1b, 0x72, 0x49,
	0x76, 0x25, 0xcd, 0x26, 0x08, 0xdb, 0x90, 0x77, 0x89, 0x24, 0xbe, 0x18, 0xdb, 0x65, 0x7d, 0x30,
	0x83, 0xf8, 0x26, 0x80, 0xd1, 0xf1, 0x69, 0x14, 0xd9, 0xeb, 0x75, 0xab, 0x51, 0x70, 0x96, 0x18,
	0xfc, 0x09, 0xe4, 0x5d, 0xe1, 0xc7, 0x01, 0x8f, 0xec, 0x8a, 0x1e, 0xa4, 0x77, 0xaf, 0xac, 0xb3,
	0xd2, 0x76, 0x66, 0x56, 0xab, 0x6b, 0x51, 0x7d, 0x75, 0x2d, 0xee, 0x43, 0x51, 0x24, 0xfd, 0x8e,
	0x6c, 0xa4, 0x03, 0xbc, 0xf7, 0x86, 0xf3, 0xe1, 0x2c, 0x2c, 0x3b, 0x59, 0x48, 0x87, 0x74, 0xb4,
	0xfb, 0xab, 0x05, 0xf9, 0x83, 0xe4, 0x62, 0xff, 0xeb, 0x6e, 0xd7, 0xa1, 0xe4, 0xd1, 0xc8, 0x0d,
	0x99, 0x5e, 0x8a, 0x64, 0xbb, 0x97, 0x29, 0x55, 0x79, 0x9f, 0x0c, 0xa9, 0x6f, 0xd6, 0xbb, 0xe8,
	0x24, 0x68, 0x69, 0x0f, 0x73, 0xff, 0x7e, 0x0f, 0x95, 0xd7, 0x09, 0xf3, 0x3c, 0xca, 0xed, 0xbc,
	0xee, 0x4c, 0x82, 0x76, 0x7f, 0xb6, 0x20, 0x67, 0x0a, 0xfd, 0xb7, 0xe9, 0xde, 0x85, 0x8c, 0x5a,
	0x0d, 0x9d, 0xe7, 0x3f, 0x87, 0x34, 0x1f, 0x45, 0x15, 0x53, 0x2d, 0x84, 0xb6, 0x50, 0x83, 0xc2,
	0xb8, 0x47, 0x9f, 0x53, 0xcf, 0xce, 0xea, 0x88, 0x33, 0x88, 0x6b, 0x50, 0xe0, 0xb1, 0xef, 0xab,
	0xbc, 0xf4, 0xf7, 0xa6, 0xe0, 0xcc, 0xf1, 0x6a, 0x17, 0xf3, 0xff, 0xb5, 0x8b, 0x77, 0x7e, 0x4c,
	0xc3, 0xc6, 0x5f, 0xb6, 0x1f, 0x5f, 0x83, 0xea, 0x8c, 0x7c, 0xcc, 0x2f, 0xb8, 0x78, 0xc6, 0xd1,
	0x1a, 0x2e, 0x42, 0xf6, 0xf3, 0x09, 0x0d, 0x29, 0xb2, 0x94, 0xd8, 0x63, 0x01, 0x93, 0x28, 0x85,
	0x01, 0x72, 0x83, 0xd1, 0x28, 0xa2, 0x12, 0xa5, 0x15, 0x3d, 0x08, 0x3d, 0x1a, 0xa2, 0x0c, 0x2e,
	0x43, 0xa1, 0x47, 0x47, 0xf2, 0x91, 0x60, 0x1c, 0x65, 0xf1, 0x3a, 0x14, 0x1d, 0x36, 0x9e, 0x18,
	0x98, 0x53, 0xb0, 0xcb, 0x39, 0x0d, 0x35, 0xcc, 0x2b, 0x38, 0x88, 0x65, 0x02, 0x0b, 0xca, 0xcb,
	0xfd, 0xaf, 0x63, 0xe2, 0xa3, 0xa2, 0xf2, 0xd2, 0x17, 0xd2, 0x20, 0xc0, 0x39, 0x48, 0x75, 0x39,
	0x2a, 0x29, 0x85, 0xbe, 0x90, 0x5d, 0x8e, 0xca, 0xb8, 0x0a, 0xa5, 0x87, 0x21, 0x25, 0x92, 0x86,
	0xa7, 0x13, 0xc2, 0xd1, 0x3a, 0xde, 0x06, 0x9c, 0x10, 0x83, 0x50, 0xdb, 0x69, 0xbe, 0x62, 0xf2,
	0x89, 0x22, 0x8d, 0xaa, 0xea, 0x7e, 0x0a, 0x2d, 0xab, 0x20, 0x5c, 0x80, 0x4c, 0x8f, 0x5d, 0x50,
	0xb4, 0x81, 0x4b, 0x90, 0xef, 0x0b, 0xa9, 0x01, 0x56, 0xd1, 0xba, 0x5a, 0xbc, 0x96, 0xa4, 0x63,
	0xd0, 0xa6, 0x42, 0x0e, 0x1d, 0x1f, 0x11, 0xe9, 0x4e, 0xd0, 0x96, 0xca, 0xa4, 0x2f, 0xe4, 0x9c,
	0xd8, 0xd6, 0x77, 0xa6, 0xe3, 0xae, 0x81, 0x6f, 0x61, 0x04, 0x65, 0x73, 0x9e, 0x30, 0x36, 0xc6,
	0x50, 0xe9, 0x46, 0xf7, 0x58, 0x24, 0x19, 0x77, 0xe5, 0x83, 0x50, 0x04, 0xe8, 0x3a, 0xde, 0x82,
	0x8d, 0x6e, 0xd4, 0x17, 0x72, 0x85, 0xae, 0xe1, 0x3c, 0xa4, 0x3f, 0xe5, 0x97, 0xe8, 0x6d, 0x2d,
	0xf8, 0x3e, 0xba, 0xa1, 0xca, 0xde, 0x61, 0x9c, 0x84, 0x97, 0x68, 0xa7, 0x96, 0xf9, 0xe6, 0xbb,
	0x9b, 0x6b, 0x77, 0xbe, 0x82, 0xca, 0xea, 0xf7, 0x16, 0x5f, 0x87, 0xad, 0xa4, 0x7b, 0xab, 0x07,
	0x68, 0x0d, 0x6f, 0x02, 0x3a, 0x23, 0x21, 0x53, 0x93, 0x74, 0x20, 0x78, 0x24, 0x09, 0x97, 0xc8,
	0x5a, 0x66, 0x67, 0xff, 0x28, 0x95, 0xb8, 0xff, 0xcd, 0x82, 0xaa, 0x89, 0xb8, 0x18, 0x93, 0x1a,
	0x6c, 0xbf, 0x42, 0x2d, 0xa6, 0x45, 0x27, 0x28, 0x09, 0xf7, 0xcc, 0xb8, 0x74, 0x98, 0x14, 0xa1,
	0x19, 0x97, 0x0e, 0x93, 0xcf, 0x45, 0x88, 0xd2, 0xaa, 0xe0, 0xc7, 0x7e, 0x1c, 0xa1, 0x8c, 0x52,
	0x38, 0x62, 0x3c, 0x8e, 0x50, 0x56, 0x91, 0x47, 0xb1, 0x2f, 0x51, 0x4e, 0xdd, 0xf5, 0x1e, 0x7b,
	0x8a, 0xf2, 0xaa, 0xd0, 0x0f, 0x7c, 0x21, 0x42, 0x85, 0x0a, 0x8a, 0x3e, 0x12, 0x1e, 0x2a, 0x2a,
	0x57, 0x07, 0x82, 0xbb, 0x44, 0x22, 0x50, 0x72, 0xef, 0x64, 0xc2, 0x46, 0x12, 0x95, 0x94, 0xec,
	0x18, 0xb9, 0xac, 0x94, 0x8f, 0xc5, 0x33, 0xb4, 0x8e, 0x37, 0x60, 0xfd, 0xd1, 0xc9, 0xa0, 0xff,
	0x80, 0x4a, 0x77, 0x72, 0x4a, 0x9f, 0x4b, 0x54, 0x51, 0x1d, 0x99, 0x53, 0x67, 0xc4, 0x47, 0x55,
	0x73, 0xd3, 0xce, 0x1f, 0x16, 0xdc, 0x76, 0x45, 0xf0, 0xfa, 0x65, 0xea, 0x14, 0xfb, 0xc2, 0xa3,
	0xc7, 0xea, 0x75, 0x73, 0x6c, 0x7d, 0xd9, 0x18, 0x33, 0x39, 0x89, 0x87, 0x4d, 0x57, 0x04, 0xad,
	0x85, 0x59, 0x2b, 0x31, 0x9b, 0x0e, 0x5b, 0xb3, 0x17, 0xd8, 0xb7, 0xa9, 0xcc, 0x41, 0xef, 0xb0,
	0xff, 0x7d, 0x6a, 0xe7, 0x60, 0xe1, 0xbd, 0x67, 0xd4, 0x0e, 0x99, 0x6c, 0x2a, 0xa7, 0xcd, 0xb3,
	0xbd, 0x9f, 0x96, 0xcf, 0xcf, 0xcd, 0xf9, 0xf9, 0x21, 0x93, 0xe7, 0xea, 0xfc, 0xfc, 0x6c, 0xef,
	0x65, 0xea, 0xfd, 0xd7, 0x9e, 0x9f, 0x3f, 0x3c, 0xee, 0x1c, 0x51, 0x49, 0x3c, 0x22, 0xc9, 0xef,
	0xa9, 0xdb, 0x0b, 0xdd, 0x76, 0xdb, 0x28, 0xb7, 0xdb, 0x87, 0x4c, 0xb6, 0xdb, 0x4a, 0xbd, 0xdd,
	0x3e, 0xdb, 0x1b, 0xe6, 0xf4, 0x3b, 0xed, 0xa3, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xb0,
	0xcf, 0x96, 0x2b, 0x0a, 0x00, 0x00,
}
